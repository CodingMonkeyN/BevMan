<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <SpaRoot>Frontend\</SpaRoot>
    <SpaProxyServerUrl>https://localhost:4200</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
    <RootNamespace>BevMan.Web</RootNamespace>
    <AssemblyName>BevMan.Web</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Application\Application.csproj"/>
    <ProjectReference Include="..\Infrastructure\Infrastructure.csproj"/>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="MicroElements.Swashbuckle.FluentValidation"/>
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore"/>
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore"/>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi"/>
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy">
      <!-- The SPA Proxy is only used at development time -->
      <Publish>false</Publish>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore"/>
    <PackageReference Include="FluentValidation.AspNetCore"/>
    <PackageReference Include="Swashbuckle.AspNetCore.Swagger"/>
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen"/>
    <PackageReference Include="Swashbuckle.AspNetCore.SwaggerUI"/>
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**"/>
    <None Remove="$(SpaRoot)**"/>
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**"/>
  </ItemGroup>

  <ItemGroup>
    <None Update="appsettings.Development.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\swagger\v1\"/>
  </ItemGroup>

  <Target Name="OpenAPI" AfterTargets="Build" Condition="$(Configuration)=='Debug'">
    <Exec Command="dotnet tool restore"/>
    <Exec Command="dotnet tool install Swashbuckle.AspNetCore.Cli --version 6.5.0"/>
    <Message Text="generating openapi" Importance="high"/>
    <Exec Command="dotnet swagger tofile --output ./wwwroot/swagger/v1/swagger.yaml --yaml $(OutputPath)$(AssemblyName).dll v1" WorkingDirectory="$(ProjectDir)"/>
    <Exec Command="dotnet swagger tofile --output ./wwwroot/swagger/v1/swagger.json $(OutputPath)$(AssemblyName).dll v1" WorkingDirectory="$(ProjectDir)"/>
  </Target>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE."/>
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..."/>
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install"/>
  </Target>

  <!-- Auto-generated Open API specification and Angular TypeScript clients -->
  <PropertyGroup>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install"/>
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration production"/>

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**"/>
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>
